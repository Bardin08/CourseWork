@page "/"
@using CourseWork.Domain.Dtos
@using CourseWork.LogicLayer.Processors
@using CourseWork.Data.Abstractions
@using CourseWork.Domain.Models

@inject IBookRepository BookRepository

<FindBookForm BookSearchingDto="@_bookSearchingDto" ValidationSuccessHandler="@Handler"/>

@if (_bookModels.Any())
{
    <br>
    <br>
    <h2 class="align-self-center">Found books</h2>
    <table class="table">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Book name</th>
            <th scope="col">Author</th>
            <th scope="col">Publishment year</th>
            <th scope="col">Descrition</th>
            <th scope="col">ISBN</th>
        </tr>
        </thead>
        <tbody>
        @for (var i = 0; i < _bookModels.Count; ++i)
        {
            <tr>
                <th scope="row">@(i + 1)</th>
                <td>@_bookModels[i].Name</td>
                <td>@_bookModels[i].Author.FirstName @_bookModels[i].Author.LastName</td>
                <td>@_bookModels[i].PublishYear</td>
                <td>@_bookModels[i].Description</td>
                <td>@_bookModels[i].ISBN</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    BookSearchingDto _bookSearchingDto = new BookSearchingDto();

    private List<BookModel> _bookModels = new List<BookModel>();
    
    private async void Handler()
    {
        // TODO: call BookSearchProcessor from CourseWork.LogicLayer.Processors

        var bookSearchingProcessor = new BookSearchingProcessor(BookRepository);

        _bookModels = bookSearchingProcessor.FindBooks(_bookSearchingDto).ToList();
    }
}
