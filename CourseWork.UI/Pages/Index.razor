@page "/"
@using CourseWork.Shared.Dtos
@using CourseWork.Shared.Models

@using CourseWork.LogicLayer.Abstractions
@using CourseWork.UI.Helpers
@using Microsoft.EntityFrameworkCore
@using CourseWork.Data.Contexts

@inject IBookActionProcessor BookActionProcessor

<FindBookForm BookSearchingDto="@_bookSearchingDto" ValidationSuccessHandler="@FindBook"/>

@if (_bookModels.Any())
{
    <br>
    <br>
    <h2 class="align-self-center">Found books</h2>
    <table class="table">
        <thead>
        <tr>
            <th scope="col">Book name</th>
            <th scope="col">Author</th>
            <th scope="col">Publishment year</th>
            <th scope="col">Descrition</th>
            <th scope="col">ISBN</th>
            <AuthorizeView Policy="@Policies.IsAdmin">
                <th scope="col">Actions</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var book in _bookModels)
        {
            <tr>
                <td>@book.Name</td>
                <td>@book.Author.FirstName @book.Author.LastName</td>
                <td>@book.PublishYear</td>
                <td>@book.Description</td>
                <td>@book.ISBN</td>
                <AuthorizeView Policy="@Policies.IsAdmin">
                    <td>
                        <button class="btn btn-info m-2 w-auto" @onclick="() => EditBook(book)">Edit</button> <br> 
                        <button class="btn btn-danger m-2 w-auto" @onclick="() => DeleteBook(book)">Delete</button> <br> 
                    </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}

@if (_showPopUp)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Edit @_modifiableBook.Name</h3>
                    <button type="button" class="close" @onclick="ClosePopUp">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-row m-2">
                        <input class="form-control col-md-12 m-1" type="text"
                           placeholder="Book name"
                           @bind="_modifiableBook.Name"/>
                    </div>

                    <div class="form-row m-2">
                        <input class="form-control col-md-9 m-1" type="text"
                               placeholder="Author name"
                               @bind="_modifiableBook.Author.FirstName" readonly/>
                        <button type="submit" class="btn btn-info col-md-2 m-1"> Edit </button>
                    </div>
                    
                    <div class="form-row m-2">
                        <input class="form-control col-md-12 m-1" type="text"
                           placeholder="Publish year"
                           @bind="_modifiableBook.PublishYear"/>
                    </div>
                    
                    <div class="form-row m-2">
                        <input class="form-control col-md-12 m-1" type="text"
                           placeholder="ISBN"
                           @bind="_modifiableBook.ISBN"/>
                    </div>
                    
                    <div class="form-row m-2">
                        <textarea class="form-control col-md-12 m-1" type="text"
                           placeholder="Book description"
                           @bind="_modifiableBook.Description" maxlength="1024"></textarea>
                    </div>

                    <br/><br/>
                    <button class="btn btn-primary" @onclick="SaveModifiedBook">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    readonly BookSearchingDto _bookSearchingDto = new BookSearchingDto();
    private List<BookModel> _bookModels = new List<BookModel>();
    private bool _showPopUp;
    private BookModel _modifiableBook;
    
    private async void FindBook()
    {
        _bookModels = (await BookActionProcessor.FindBooks(_bookSearchingDto)).ToList();
    }

    private void EditBook(BookModel book)
    {
        _showPopUp = true;
        _modifiableBook = book;
    }

    private void DeleteBook(BookModel book)
    {
        _bookModels.RemoveAll(b => b.Id == book.Id);
        
    // TODO: call BookDeleteProvider from LogicLayer (requires method delete by ID)
    // TODO: show confirmation form (maybe admin need to enter the book name to delete it)    
    }
    
    private void ClosePopUp()
    {
        _showPopUp = false;
        _modifiableBook = null;
    }

    private async void SaveModifiedBook()
    {
        var updatedBookIndex = _bookModels.IndexOf(_bookModels.Find(b => b.Id == _modifiableBook.Id));
        _bookModels[updatedBookIndex] = _modifiableBook;
        
        await BookActionProcessor.UpdateBookById(_modifiableBook.Id, new BookCreationDto
        {
            Id =  _modifiableBook.Id,
            Author = _modifiableBook.Author,
            Description = _modifiableBook.Description,
            Isbn = _modifiableBook.ISBN,
            BookName = _modifiableBook.Name,
            PublishYear = _modifiableBook.PublishYear,
            KeyWordModels = _modifiableBook.KeyWords
        });

        ClosePopUp();

    // TODO: call BookSavingProvider from LogicLayer (requires method update by ID)
    }
}
